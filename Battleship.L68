00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 24/05/2022 20:06:05

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                              ; first instruction of program
00001000                            10              
00001000                            11  * initialise
00001000                            12  
00001000  700C                      13              move.l      #12,d0      ; Turn Off Keyboard Echo (don't display characters)
00001002  7200                      14              move.l      #0,d1
00001004  4E4F                      15              trap        #15
00001006  4EB9 000013C0             16              jsr         setSeed     ; set the random seed
0000100C  4EB9 00001016             17              jsr         gameLoop
00001012                            18  
00001012                            19          
00001012                            20  
00001012  FFFF FFFF                 21      SIMHALT                     ; halt simulator
00001016                            22  
00001016                            23      INCLUDE     Main.X68
00001016                            24    
00001016                            25  
00001016                            26  
00001016  0C39 0000 00001858        27  gameLoop    cmp.b   #0,gameMode       
0000101E  6700 002E                 28              beq     setupMode
00001022  0C39 0001 00001858        29              cmp.b   #1,gameMode       
0000102A  6700 002A                 30              beq     beginMessage
0000102E  0C39 0002 00001858        31              cmp.b   #2,gameMode
00001036  6700 0026                 32              beq     cmpSetup
0000103A  0C39 0003 00001858        33              cmp.b   #3,gameMode
00001042  6700 0028                 34              beq     playMode    
00001046                            35  gameContd   
00001046  4EB9 0000136C             36              jsr     gridRfrsh
0000104C  60C8                      37              bra     gameLoop
0000104E                            38  setupMode   
0000104E  4EB9 00001074             39              jsr     setup
00001054  60F0                      40              bra     gameContd
00001056                            41              
00001056                            42  beginMessage
00001056  4EB9 000011A4             43              jsr     begin
0000105C  60E8                      44              bra     gameContd 
0000105E                            45  
0000105E                            46  cmpSetup    
0000105E  4EB9 0000120A             47              jsr     computerSetup
00001064  5239 00001858             48              addq.b  #1,gameMode  
0000106A  60DA                      49              bra     gameContd
0000106C                            50              
0000106C                            51  playMode    
0000106C  4EB9 000012D0             52              jsr     playRound
00001072  60D2                      53              bra     gameContd
00001074                            54  
00001074                            55  
00001074                            56  
00001074                            57  
00001074                            58  setup       
00001074  4E50 0000                 59              link    a0,#0
00001078  47F9 0000185A             60              lea     plyrShips,a3        ; select ship data from array
0000107E  2239 00001882             61              move.l  selected,d1
00001084  C2FC 0004                 62              mulu    #4,d1
00001088  D7C1                      63              adda.l  d1,a3               ; increment array to get selected ship data
0000108A  0293 FFF0FFFF             64              and.l   #$FFF0FFFF,(a3)     ; clear colour attribute
00001090  0693 00050000             65              add.l   #$00050000,(a3)     ; set colour 
00001096                            66              
00001096  2413                      67              move.l  (a3),d2             ; move ship data into d2
00001098  84BC 10000000             68              or.l    #$10000000,d2       ; set the show bit 
0000109E  2682                      69              move.l  d2,(a3)
000010A0  C4BC 0000000F             70              and.l   #$0000000F,d2       ; get length attribute         
000010A6  2082                      71              move.l  d2,(a0)             ; store length attribute in variable              
000010A8                            72  
000010A8  2613                      73              move.l  (a3),d3             ; move ship data into d3
000010AA  C6BC 00001000             74              and.l   #$00001000,d3       ; get v/h bit 
000010B0  2F03                      75              move.l  d3,-(SP)            ; push v/h bit onto stack      
000010B2  2F10                      76              move.l  (a0),-(SP)          ; pass ship array index as argument            
000010B4  4EB9 000012E0             77              jsr     userInput           ; get user input
000010BA  241F                      78              move.l  (SP)+,d2            ; put return value into d2
000010BC  261F                      79              move.l  (SP)+,d3            ; pop v/h bit into d3
000010BE  49F9 00001856             80              lea     cursorPos,a4        ; get the cursor position
000010C4  B47C 0072                 81              cmp     #'r',d2             ; if return value equals r then rotate ship
000010C8  6600 002E                 82              bne     noRotate            
000010CC                            83              
000010CC  2810                      84              move.l  (a0),d4             ; move index into d4
000010CE  D814                      85              add.b   (a4),d4             ; add x pos to index
000010D0  0484 00000009             86              sub.l   #9,d4               ; subtract boundary value from result
000010D6  6F00 0004                 87              ble     noCrsrLft           ; 
000010DA  9914                      88              sub.b   d4,(a4)             ; take difference from cursor x pos   
000010DC                            89  noCrsrLft   
000010DC  2810                      90              move.l  (a0),d4             
000010DE  D82C 0001                 91              add.b   1(a4),d4                
000010E2  0484 00000009             92              sub.l   #9,d4
000010E8  6F00 0006                 93              ble     noCrsrUp   
000010EC  992C 0001                 94              sub.b   d4,1(a4) 
000010F0                            95  noCrsrUp    
000010F0  0683 FFFFEFFF             96              add.l   #$FFFFEFFF,d3       
000010F6  4683                      97              not.l   d3                  ; flip v/h bit
000010F8                            98  noRotate    
000010F8  B47C 0065                 99              cmp     #'e',d2             ; if e not pressed then skip ship increment
000010FC  6600 006C                100              bne     noShipInc
00001100  4A05                     101              tst.b   d5                  ; collision flag
00001102  6600 0066                102              bne     noShipInc
00001106  53B9 00001882            103              subq.l  #1,selected         ; decrement ship index
0000110C  6A00 0014                104              bpl     noRsetIndex  
00001110  23FC 00000004 00001882   105              move.l  #4,selected         ; if ship index is minus then set back to 4
0000111A  45F9 00001858            106              lea     gameMode,a2         ; load game mode
00001120  5212                     107              addq.b  #1,(a2)             ; increment game mode to play mode
00001122                           108  noRsetIndex     
00001122  0293 FFF0FFFF            109              and.l   #$FFF0FFFF,(a3)     ; clear colour attribute of prev ship
00001128  0693 00020000            110              add.l   #$00020000,(a3)     ; set colour 
0000112E  47F9 0000185A            111              lea     plyrShips,a3        ; load ships
00001134  2239 00001882            112              move.l  selected,d1         
0000113A  C2FC 0004                113              mulu    #4,d1           
0000113E  D7C1                     114              adda.l  d1,a3               ; select the next ship
00001140  0293 FFF0FFFF            115              and.l   #$FFF0FFFF,(a3)     ; clear colour attribute of next ship
00001146  0693 00050000            116              add.l   #$00050000,(a3)     ; set colour 
0000114C  2213                     117              move.l  (a3),d1             ; ship data into d1
0000114E  C2BC 00000F00            118              and.l   #$00000F00,d1       ; get x pos of ship
00001154  E089                     119              lsr.l   #8,d1
00001156  1881                     120              move.b  d1,(a4)             ; set cursor x pos to ship x pos
00001158  2213                     121              move.l  (a3),d1             ; ship data into d1
0000115A  C2BC 000000F0            122              and.l   #$000000F0,d1       ; get y pos of ship
00001160  E889                     123              lsr.l   #4,d1
00001162  1941 0001                124              move.b  d1,1(a4)            ; set cursor y pos to ship y pos          
00001166  6000 0018                125              bra     setupContinued   
0000116A                           126  noShipInc
0000116A  4241                     127              clr     d1  
0000116C  1214                     128              move.b  (a4),d1             ; move  x value into d1
0000116E  E989                     129              lsl.l   #4,d1               ; shift left to make room for y
00001170  D22C 0001                130              add.b   1(a4),d1            ; add y value to d1
00001174  E989                     131              lsl.l   #4,d1               ; shift left
00001176  D283                     132              add.l   d3,d1
00001178  0293 FFFF000F            133              and.l   #$FFFF000F,(a3)     ; clear x,y old data
0000117E  D393                     134              add.l   d1,(a3)             ; add new x,y data
00001180                           135  setupContinued
00001180  2F3C 00000000            136              move.l  #0,-(SP)            ; computer player flag
00001186  4879 0000185A            137              pea     plyrShips   
0000118C  4879 00001772            138              pea     plyrGrid     
00001192  4EB9 0000155A            139              jsr     clearGrd           
00001198  4EB9 0000140C            140              jsr     shipsOnGrd
0000119E  504F                     141              adda    #$8,a7              
000011A0  4E58                     142              unlk    a0
000011A2  4E75                     143              rts
000011A4                           144   
000011A4                           145       
000011A4                           146  begin   
000011A4  43F9 00001886            147              lea     beginMsg,a1        
000011AA  323C 012C                148              move.w  #300,d1                
000011AE  343C 00FA                149              move.w  #250,d2             
000011B2  705F                     150              move.l  #95,d0
000011B4  4E4F                     151              trap    #15                 ; print begin message on screen
000011B6  2F3C 00000000            152              move.l  #0,-(SP)            ; make room on stack for return value
000011BC  4EB9 000012E0            153              jsr     userInput
000011C2  221F                     154              move.l  (SP)+,d1
000011C4  B27C 0079                155              cmp     #'y',d1             
000011C8  6700 001E                156              beq     beginGame
000011CC  B27C 006E                157              cmp     #'n',d1
000011D0  6700 0004                158              beq     backToSetup
000011D4  4E75                     159              rts
000011D6                           160  backToSetup 
000011D6  13FC 0000 00001858       161              move.b  #0,gameMode         ; set game mode back to 0
000011DE  323C FF00                162              move.w  #$FF00,d1           ; clear screen
000011E2  700B                     163              move.l  #11,d0
000011E4  4E4F                     164              trap    #15
000011E6  4E75                     165              rts
000011E8                           166  beginGame   
000011E8  5239 00001858            167              addq.b  #1,gameMode         ; increment game mode
000011EE  323C FF00                168              move.w  #$FF00,d1           ; clear screen
000011F2  700B                     169              move.l  #11,d0
000011F4  4E4F                     170              trap    #15
000011F6  43F9 000018AE            171              lea     startMsg,a1
000011FC  323C 012C                172              move.w  #300,d1
00001200  343C 00FA                173              move.w  #250,d2
00001204  705F                     174              move.l  #95,d0
00001206  4E4F                     175              trap    #15
00001208  4E75                     176              rts              
0000120A                           177  
0000120A                           178  
0000120A                           179  
0000120A                           180  
0000120A                           181  computerSetup
0000120A  4E50 0000                182              link    a0,#0
0000120E                           183      * load selected ship
0000120E                           184  loadNextShip  
0000120E  47F9 0000186E            185              lea     cmpShips,a3         ; select ship data from array
00001214  2239 00001882            186              move.l  selected,d1
0000121A  C2FC 0004                187              mulu    #4,d1
0000121E  D7C1                     188              adda.l  d1,a3               ; increment array to get selected ship data
00001220  0093 10000000            189              or.l    #$10000000,(a3)
00001226                           190              
00001226                           191      * get random x y pos
00001226  2813                     192              move.l  (a3),d4             ; move ship data into d2
00001228  C8BC 0000000F            193              and.l   #$0000000F,d4       ; get length attribute
0000122E  4242                     194              clr     d2
00001230  4243                     195              clr     d3        
00001232  343C 000A                196              move.w  #10,d2              ; load grid size
00001236  9444                     197              sub.w   d4,d2               ; subtract ship length from grid size
00001238  363C 0000                198              move.w  #0,d3
0000123C  4EB9 000013CE            199              jsr     getRandom
00001242  4244                     200              clr     d4
00001244  3801                     201              move.w  d1,d4               ; move result into d4
00001246  4844                     202              swap    d4
00001248  343C 000A                203              move.w  #10,d2              ; d4 contains y value in high word and x in low word
0000124C  363C 0000                204              move.w  #0,d3
00001250  4EB9 000013CE            205              jsr     getRandom
00001256  3801                     206              move.w  d1,d4
00001258  0293 FFFF0FFF            207              and.l   #$FFFF0FFF,(a3)     ; clear horizontal bit
0000125E                           208              
0000125E                           209      * randomly set vertical/horizontal        
0000125E                           210     
0000125E  343C FFFF                211              move.w  #$FFFF,d2           ; any number from 0 - 65535
00001262  363C 0000                212              move.w  #0,d3
00001266  4EB9 000013CE            213              jsr     getRandom
0000126C  2413                     214              move.l  (a3),d2             ; move ship data into d2
0000126E  B2BC 00007FFF            215              cmp.l   #$7FFF,d1           ; compare result with 32767
00001274  6E00 000A                216              bgt     notHorizontal                
00001278  84BC 00001000            217              or.l    #$00001000,d2       ; set horizontal bit
0000127E  4844                     218              swap    d4                  ; swap x y values in d4                      
00001280                           219  notHorizontal            
00001280  4241                     220              clr     d1
00001282  D244                     221              add.w   d4,d1               ; load x value
00001284  E949                     222              lsl.w   #4,d1               ; shift x value 
00001286  4844                     223              swap    d4
00001288  D244                     224              add.w   d4,d1
0000128A  E949                     225              lsl.w   #4,d1
0000128C  C4BC FFFFF00F            226              and.l   #$FFFFF00F,d2       ; clear old x y value
00001292  D481                     227              add.l   d1,d2
00001294  2682                     228              move.l  d2,(a3)             ; store ship data
00001296                           229              
00001296  2F3C 00000001            230              move.l  #1,-(SP)            ; computer player flag
0000129C  4879 0000186E            231              pea     cmpShips   
000012A2  4879 000017D6            232              pea     cmpGrid     
000012A8  4EB9 0000155A            233              jsr     clearGrd
000012AE  4EB9 0000140C            234              jsr     shipsOnGrd
000012B4  504F                     235              adda    #$8,a7
000012B6  4A05                     236              tst.b   d5                  ; collision flag
000012B8  6600 0008                237              bne     placeShipAgain
000012BC  53B9 00001882            238              subq.l  #1,selected
000012C2                           239  placeShipAgain
000012C2  4AB9 00001882            240              tst.l   selected
000012C8  6A00 FF44                241              bpl     loadNextShip
000012CC  4E58                     242              unlk    a0
000012CE  4E75                     243              rts
000012D0                           244  
000012D0                           245  
000012D0                           246  
000012D0                           247  
000012D0                           248  playRound   
000012D0  2F3C 00000000            249              move.l  #0,-(SP)            ; make room on stack for return value
000012D6  4EB9 000012E0            250              jsr     userInput
000012DC  221F                     251              move.l  (SP)+,d1
000012DE  4E75                     252              rts
000012E0                           253  
000012E0                           254  
000012E0                           255  
000012E0                           256  
000012E0                           257  userInput    
000012E0  4E50 0000                258              link    a0,#0
000012E4  7809                     259              move.l  #9,d4               ; cursor limit d4
000012E6  98A8 0008                260              sub.l   8(a0),d4            ; subtract ship size 
000012EA  43F9 00001856            261              lea     cursorPos,a1
000012F0  4241                     262              clr     d1
000012F2  4242                     263              clr     d2
000012F4  4243                     264              clr     d3
000012F6  1411                     265              move.b  (a1),d2             ; cursor x pos in d2
000012F8  1629 0001                266              move.b  (1,a1),d3           ; cursor y pos in d3
000012FC  103C 0005                267              move.b  #5,d0               ; listen for key press
00001300  4E4F                     268              trap    #15       
00001302  B23C 0077                269              cmp.b   #'w',d1
00001306  6700 0028                270              beq     cursorUp  
0000130A  B23C 0073                271              cmp.b   #'s',d1
0000130E  6700 002C                272              beq     cursorDown 
00001312  B23C 0061                273              cmp.b   #'a',d1
00001316  6700 0036                274              beq     cursorLeft 
0000131A  B23C 0064                275              cmp.b   #'d',d1
0000131E  6700 003A                276              beq     cursorRight           
00001322  1282                     277  inptEnd     move.b  d2,(a1)
00001324  1343 0001                278              move.b  d3,(1,a1)
00001328  2141 0008                279              move.l  d1,8(a0)
0000132C  4E58                     280              unlk    a0
0000132E  4E75                     281              rts         
00001330                           282  
00001330  B63C 0000                283  cursorUp    cmp.b   #0,d3  
00001334  6FEC                     284              ble     inptEnd
00001336  0643 FFFF                285              addi    #-1,d3
0000133A  60E6                     286              bra     inptEnd
0000133C  4AA8 000C                287  cursorDown  tst.l   12(a0)              ; test v/h/ bit
00001340  6700 0004                288              beq     dwnBndryChk     
00001344  7809                     289              move.l  #9,d4               ; if ship is horizontal set downwards boundary to 9
00001346  B604                     290  dwnBndryChk cmp.b   d4,d3  
00001348  6CD8                     291              bge     inptEnd
0000134A  5243                     292              addi    #1,d3
0000134C  60D4                     293              bra     inptEnd
0000134E  B43C 0000                294  cursorLeft  cmp.b   #0,d2  
00001352  6FCE                     295              ble     inptEnd
00001354  0642 FFFF                296              addi    #-1,d2
00001358  60C8                     297              bra     inptEnd
0000135A  4AA8 000C                298  cursorRight tst.l   12(a0)              ; test v/h/ bit
0000135E  6600 0004                299              bne     rhtBndryChk     
00001362  7809                     300              move.l  #9,d4               ; if ship is vertical set right boundary to 9
00001364  B404                     301  rhtBndryChk cmp.b   d4,d2  
00001366  6CBA                     302              bge     inptEnd
00001368  5242                     303              addi    #1,d2
0000136A  60B6                     304              bra     inptEnd
0000136C                           305              
0000136C                           306             
0000136C                           307  
0000136C                           308  
0000136C                           309  
0000136C                           310  gridRfrsh   
0000136C  2F05                     311              move.l  d5,-(SP)            ; push collision flag data onto stack
0000136E  45F9 00001772            312              lea     plyrGrid,a2         ; load player grid
00001374  2F3C 000000FA            313              move.l  #250,-(SP)          ; push y pos of grid on stack
0000137A  4EB9 00001578            314              jsr     drwGrid         
00001380  584F                     315              adda    #$4,a7              ; increment stack pointer
00001382                           316              
00001382  45F9 000017D6            317              lea     cmpGrid,a2          ; load computer player grid
00001388  2F3C 00000014            318              move.l  #20,-(a7)           ; push y pos of grid onto stack
0000138E  4EB9 00001578            319              jsr     drwGrid
00001394  584F                     320              adda    #$4,a7              ; increment stack pointer
00001396  2A1F                     321              move.l  (SP)+,d5            ; pop collison flag back in d5
00001398                           322   
00001398  0C39 0003 00001858       323              cmp.b   #3,gameMode
000013A0  6600 001C                324              bne     noCursorTarget
000013A4  47F9 00001856            325              lea     cursorPos,a3
000013AA  2F3C 00000014            326              move.l  #20,-(SP)
000013B0  1F13                     327              move.b  (a3),-(SP)
000013B2  1F2B 0001                328              move.b  (1,a3),-(SP)
000013B6  4EB9 00001600            329              jsr     drawCursorTarget
000013BC  504F                     330              adda    #$8,a7            
000013BE                           331  noCursorTarget
000013BE  4E75                     332              rts
000013C0                           333   
000013C0                           334  
000013C0                           335  
000013C0                           336  
000013C0                           337      
000013C0                           338      INCLUDE     Random.X68
000013C0                           339  
000013C0                           340  
000013C0                           341  setSeed 
000013C0  303C 0008                342          move.w  #8,d0           ; get hundredths of seconds since midnight
000013C4  4E4F                     343          trap    #15             ;
000013C6  33C1 00001404            344          move.w  d1,seed         ; store low word as seed
000013CC  4E75                     345          rts
000013CE                           346  
000013CE                           347              
000013CE                           348  getRandom
000013CE  4281                     349          clr.l   d1              ; 
000013D0  3239 00001404            350          move.w  seed,d1         ;
000013D6  C2F9 00001406            351          mulu    multiplier,d1   ; 
000013DC  D2B9 00001408            352          add.l   increment,d1    ;
000013E2  82F9 0000140A            353          divu    modulus,d1      ;
000013E8  4841                     354          swap    d1              ; 
000013EA  33C1 00001404            355          move.w  d1,seed         ; store result as next value
000013F0  C2BC 0000FFFF            356          and.l   #$0000FFFF,d1   ; clear high word
000013F6  82C2                     357          divu.w  d2,d1           ; divide by range parameter
000013F8  4841                     358          swap    d1              ; swap to get remainder
000013FA  D243                     359          add.w   d3,d1           ; add lower limit parameter
000013FC  C2BC 0000FFFF            360          and.l   #$0000FFFF,d1   ; clear high word
00001402  4E75                     361          rts
00001404                           362         
00001404                           363  
00001404                           364  seed        ds.w    1
00001406= 08D0                     365  multiplier  dc.w    2256
00001408= 0002                     366  increment   dc.w    2
0000140A= FFFF                     367  modulus     dc.w    $FFFF
0000140C                           368  
0000140C                           369  
0000140C                           370  
0000140C                           371  -------------------- end include --------------------
0000140C                           372      INCLUDE     Grid.X68
0000140C                           373  
0000140C                           374  
0000140C                           375  shipsOnGrd
0000140C  4E50 FFFC                376              link    a0,#-4
00001410  2628 0010                377              move.l  16(a0),d3           ; computer player flag
00001414  217C 00000000 FFFC       378              move.l  #0,-4(a0)           ; counter variable
0000141C  2868 000C                379              move.l  12(a0),a4
00001420  2214                     380  nxtShip     move.l  (a4),d1             ; put ship data into d1
00001422  C2BC 10000000            381              and.l   #$10000000,d1       ; bit mask to get show bit
00001428  4A81                     382              tst.l   d1                  ; test to see whether to show ship or not   
0000142A  6700 001E                383              beq     incShip             ; if not then skip
0000142E  2239 00001882            384              move.l  selected,d1
00001434  B2A8 FFFC                385              cmp.l   -4(a0),d1           ; compare counter to selected 
00001438  6700 0010                386              beq     incShip             ; skip selected ship
0000143C  2F28 0008                387              move.l  8(a0),-(SP)         ; push grid parameter
00001440  2F14                     388              move.l  (a4),-(SP)          ; push ship data onto stack
00001442  4EB9 0000149C            389              jsr     addToGrid
00001448  584F                     390              adda    #$4,a7   
0000144A                           391                            
0000144A  588C                     392  incShip     addq.l  #4,a4               ; increment array
0000144C  52A8 FFFC                393              addq.l  #1,-4(a0)           ; decrement counter
00001450  2228 FFFC                394              move.l  -4(a0),d1
00001454  B27C 0005                395              cmp     #5,d1           
00001458  66C6                     396              bne     nxtShip             ; if counter equals 5 then break
0000145A  2868 000C                397              move.l  12(a0),a4
0000145E  2239 00001882            398              move.l  selected,d1
00001464  C2FC 0004                399              mulu    #4,d1
00001468  D9C1                     400              adda.l  d1,a4               ; selected ship data
0000146A  2F28 0008                401              move.l  8(a0),-(SP)         ; push grid parameter
0000146E  2F14                     402              move.l  (a4),-(SP)          ; push ship data onto stack
00001470  4EB9 0000149C            403              jsr     addToGrid
00001476  584F                     404              adda    #$4,a7
00001478  4A05                     405              tst.b   d5                  ; collision detected flag
0000147A  6700 001C                406              beq     noCollision
0000147E  0294 FFF0FFFF            407              and.l   #$FFF0FFFF,(a4)     ; clear colour attribute
00001484  0694 00040000            408              add.l   #$00040000,(a4)     ; set colour
0000148A  2F28 0008                409              move.l  8(a0),-(SP)         ; push grid parameter
0000148E  2F14                     410              move.l  (a4),-(SP)          ; push ship data onto stack
00001490  4EB9 0000149C            411              jsr     addToGrid
00001496  584F                     412              adda    #$4,a7
00001498                           413  noCollision            
00001498  4E58                     414              unlk    a0
0000149A  4E75                     415              rts
0000149C                           416  
0000149C                           417  addToGrid   
0000149C  4E50 FFF0                418              link    a0,#-16         
000014A0  2228 0008                419              move.l  8(a0),d1
000014A4  C2BC 00000F00            420              and.l   #$00000F00,d1       ; x pos bitmask
000014AA  E089                     421              lsr.l   #$8,d1              ; shift bits right
000014AC  2141 FFFC                422              move.l  d1,-4(a0)           ; store x value locally
000014B0  2228 0008                423              move.l  8(a0),d1            ; 
000014B4  C2BC 000000F0            424              and.l   #$000000F0,d1       ; y pos bitmask
000014BA  E889                     425              lsr.l   #$4,d1              ; shift bits right
000014BC  C2FC 000A                426              mulu    #10,d1              ; multiply by tiles in row
000014C0  2141 FFF8                427              move.l  d1,-8(a0)           ; store y value locally
000014C4  2228 0008                428              move.l  8(a0),d1    
000014C8  C2BC 0000000F            429              and.l   #$0000000F,d1       ; length bitmask
000014CE  5281                     430              addq.l  #1,d1
000014D0  2141 FFF4                431              move.l  d1,-12(a0)          ; length value
000014D4  2228 0008                432              move.l  8(a0),d1        
000014D8  C2BC 00001000            433              and.l   #$00001000,d1       ; vertical/horizontal bitmask
000014DE  E089                     434              lsr.l   #$8,d1
000014E0  E889                     435              lsr.l   #$4,d1
000014E2  1141 FFF3                436              move.b  d1,-13(a0)          ; v/h flag (true = vertical)
000014E6  2228 0008                437              move.l  8(a0),d1
000014EA  4841                     438              swap    d1
000014EC  E909                     439              lsl.b   #4,d1
000014EE  1141 FFF2                440              move.b  d1,-14(a0)          ; value to set grid tile to
000014F2                           441              
000014F2  2468 000C                442              move.l  12(a0),a2
000014F6                           443     
000014F6  2228 FFFC                444              move.l  -4(a0),d1
000014FA  D2A8 FFF8                445              add.l   -8(a0),d1           ; add x and y values to get first tile                     
000014FE  D5C1                     446              adda.l  d1,a2               ; get array index
00001500  4245                     447              clr     d5                  ; clear collision flag
00001502  2228 FFF4                448              move.l  -12(a0),d1
00001506                           449  setTile     
00001506  4A05                     450              tst.b   d5                  ; if d5 is set then skip
00001508  6600 0006                451              bne     setValue            ; this avoids unsetting the collision flag on the next tile
0000150C  4A12                     452              tst.b   (a2)                ; test the tile to see if anything already there
0000150E  56C5                     453              sne     d5                  ; if tile not empty set d5
00001510                           454  setValue
00001510  14A8 FFF2                455              move.b  -14(a0),(a2)        ; set value of tile
00001514  4A28 FFF3                456              tst.b   -13(a0)             ; test horizontal bit
00001518  6700 0008                457              beq     incRow
0000151C  524A                     458              addq    #1,a2               ; increment the address counter by 1 (next column)
0000151E  6000 0006                459              bra     cntnue
00001522  D4FC 000A                460  incRow      adda    #10,a2              ; inc address by 10 (next row)
00001526  5381                     461  cntnue      subq.l  #1,d1               ; decrement length variable
00001528  66DC                     462              bne     setTile
0000152A  4A43                     463              tst     d3
0000152C  6700 0028                464              beq     noMargin
00001530                           465              
00001530  2228 FFF4                466              move.l  -12(a0),d1          ; push length value on stack
00001534  3F01                     467              move.w  d1,-(SP)
00001536                           468              
00001536  4241                     469              clr     d1
00001538  1228 FFF3                470              move.b  -13(a0),d1          ; push horizontal flag on stack
0000153C  3F01                     471              move.w  d1,-(SP)
0000153E                           472              
0000153E  2228 FFF8                473              move.l  -8(a0),d1           ; push y value on stack
00001542  82FC 000A                474              divu    #10,d1
00001546  3F01                     475              move.w  d1,-(SP)
00001548  2228 FFFC                476              move.l  -4(a0),d1           ; push x value on stack
0000154C  3F01                     477              move.w  d1,-(SP)
0000154E                           478              
0000154E  4EB9 0000169A            479              jsr     addMargin
00001554  504F                     480              adda    #$8,a7                                    
00001556                           481    
00001556                           482  noMargin         
00001556  4E58                     483              unlk    a0
00001558  4E75                     484              rts
0000155A                           485  
0000155A                           486  
0000155A                           487  
0000155A                           488  
0000155A                           489  
0000155A                           490  clearGrd    
0000155A  4E50 0000                491              link    a0,#0
0000155E  2468 0008                492              move.l  8(a0),a2            ; load the player grid
00001562  7200                     493              move.l  #0,d1               ; load counter into d1
00001564                           494  clrGrdLoop  
00001564  264A                     495              movea.l a2,a3
00001566  D7C1                     496              adda.l  d1,a3
00001568  16BC 0000                497              move.b  #0,(a3)             ; move 0 into grid
0000156C  5281                     498              addq.l  #1,d1               ; decrement counter
0000156E  B27C 0064                499              cmp     #100,d1
00001572  66F0                     500              bne     clrGrdLoop          ; if equals 100 then break
00001574  4E58                     501              unlk    a0
00001576  4E75                     502              rts
00001578                           503  
00001578                           504  
00001578                           505  
00001578  282F 0004                506  drwGrid     move.l  4(a7),d4            ; starting lower y value
0000157C  4245                     507              clr     d5                  ; row counter
0000157E  363C 0064                508  drwRow      move.w  #GRIDX,d3           ; starting x value
00001582  3404                     509              move.w  d4,d2               ; move lower y value into upper y
00001584  D879 0000183A            510              add.w   tileSize,d4         ; add tile size to lower y
0000158A  4246                     511              clr     d6                  ; column counter
0000158C  4EB9 000015A8            512              jsr     drwCol          
00001592  5245                     513              addq    #1,d5               ; increment row counter
00001594  BA7C 000A                514              cmp     #$a,d5
00001598  66E4                     515              bne     drwRow
0000159A  223C 00000000            516              move.l  #BLACK,d1
000015A0  303C 0051                517              move    #81,d0
000015A4  4E4F                     518              trap    #15
000015A6  4E75                     519              rts 
000015A8                           520  
000015A8  4EB9 000015C6            521  drwCol      jsr     fillRct
000015AE  3203                     522              move.w  d3,d1               ; move right x value into left xx
000015B0  D679 0000183A            523              add.w   tileSize,d3         ; add tile size to right x
000015B6  303C 0057                524              move.w  #87,d0              ; draw rectangle
000015BA  4E4F                     525              trap    #15             
000015BC  5246                     526              addq    #1,d6               ; increment column counter
000015BE  BC7C 000A                527              cmp     #$a,d6
000015C2  66E4                     528              bne     drwCol
000015C4  4E75                     529              rts           
000015C6                           530  
000015C6  4E50 FFFC                531  fillRct     link    a0,#-4
000015CA  47D2                     532              lea     (a2),a3             ; load grid
000015CC  1E39 0000183C            533              move.b  tileNum,d7          ; move 10 to d7 (number of tiles)
000015D2  CEC5                     534              mulu    d5,d7               ; multiply row counter with d7
000015D4  DE06                     535              add.b   d6,d7               ; add column counter with d7
000015D6  D6C7                     536              adda    d7,a3               ; add d7 to grid address
000015D8  1153 0004                537              move.b  (a3),4(a0)          ; move value of a3 to local variable
000015DC  1E3C 00F0                538              move.b  #$F0,d7             ; put bit mask 11110000 into d7                       
000015E0  CE28 0004                539              and.b   4(a0),d7            ; and bit mask with tile data bits
000015E4  8EFC 0010                540              divu    #$10,d7             ; shift bits right
000015E8  CEFC 0004                541              mulu    #$4,d7              ; multiply by 4 to increment array of longs
000015EC  47F9 0000183E            542              lea     tileclr,a3          ; load tile colour array address
000015F2  D6C7                     543              adda    d7,a3               ; increment array  
000015F4  2213                     544              move.l  (a3),d1             ; move selected colour into d1
000015F6  103C 0051                545  fill        move.b  #81,d0              ; set fill colour
000015FA  4E4F                     546              trap    #15 
000015FC  4E58                     547              unlk    a0 
000015FE  4E75                     548              rts
00001600                           549              
00001600                           550              
00001600                           551  
00001600                           552  
00001600                           553  drawCursorTarget
00001600                           554  
00001600  4E50 FFF8                555              link    a0,#-8
00001604                           556  
00001604  223C 00FF00FF            557              move.l  #FUCHSIA,d1
0000160A  303C 0050                558              move    #80,d0
0000160E  4E4F                     559              trap    #15
00001610                           560  
00001610                           561  
00001610  4241                     562              clr     d1
00001612  4242                     563              clr     d2
00001614  1228 000A                564              move.b  10(a0),d1           
00001618  C2F9 0000183A            565              mulu    tileSize,d1
0000161E  0641 0064                566              add     #GRIDX,d1
00001622                           567  
00001622  1428 0008                568              move.b  8(a0),d2
00001626  C4F9 0000183A            569              mulu    tileSize,d2
0000162C  D4A8 000C                570              add.l   12(a0),d2
00001630                           571  
00001630  2601                     572              move.l  d1,d3
00001632  2802                     573              move.l  d2,d4
00001634  D679 0000183A            574              add     tileSize,d3
0000163A  D879 0000183A            575              add     tileSize,d4
00001640                           576  
00001640  303C 005B                577              move.w  #91,d0
00001644  4E4F                     578              trap    #15
00001646                           579  
00001646  2141 FFFC                580              move.l  d1,-4(a0)           ; store x values in local variable
0000164A  2143 FFF8                581              move.l  d3,-8(a0)
0000164E                           582  
0000164E  3239 0000183A            583              move    tileSize,d1
00001654  82FC 0002                584              divu    #2,d1
00001658  D2A8 FFFC                585              add.l   -4(a0),d1              
0000165C  3601                     586              move    d1,d3
0000165E                           587  
0000165E  303C 0054                588              move.w  #84,d0
00001662  4E4F                     589              trap    #15
00001664                           590  
00001664  2228 FFFC                591              move.l  -4(a0),d1           ; restore x values
00001668  2628 FFF8                592              move.l  -8(a0),d3
0000166C                           593  
0000166C  2142 FFFC                594              move.l  d2,-4(a0)           ; store y values in local variable
00001670  2144 FFF8                595              move.l  d4,-8(a0)
00001674                           596  
00001674  3439 0000183A            597              move    tileSize,d2
0000167A  84FC 0002                598              divu    #2,d2
0000167E  D4A8 FFFC                599              add.l   -4(a0),d2              
00001682  3802                     600              move    d2,d4
00001684                           601  
00001684  303C 0054                602              move.w  #84,d0
00001688  4E4F                     603              trap    #15
0000168A                           604  
0000168A  223C 00FFFFFF            605              move.l  #WHITE,d1
00001690  303C 0050                606              move    #80,d0
00001694  4E4F                     607              trap    #15
00001696                           608  
00001696  4E58                     609              unlk    a0
00001698  4E75                     610              rts
0000169A                           611  
0000169A                           612  
0000169A                           613  
0000169A                           614  
0000169A                           615  
0000169A                           616  addMargin
0000169A  4E50 FFF8                617              link    a0,#-8
0000169E  3228 0008                618              move.w  8(a0),d1            ; ship x
000016A2  3428 000A                619              move.w  10(a0),d2           ; ship y      
000016A6  3141 FFFE                620              move.w  d1,-2(a0)           ; store start x pos
000016AA  3142 FFFC                621              move.w  d2,-4(a0)           ; store start y pos
000016AE  4A68 000C                622              tst.w   12(a0)              ; test the horizontal flag
000016B2  6700 0016                623              beq     isVertical
000016B6                           624              
000016B6  3228 000E                625              move.w  14(a0),d1           ; x counter
000016BA  5241                     626              addq.w  #1,d1
000016BC  3141 FFFA                627              move.w  d1,-6(a0)           ; store x counter
000016C0  317C 0002 FFF8           628              move.w  #2,-8(a0)           ; store y counter
000016C6  6000 0012                629              bra     truncateMargin
000016CA                           630  isVertical
000016CA  317C 0002 FFFA           631              move.w  #2,-6(a0)           ; store x counter
000016D0  3428 000E                632              move.w  14(a0),d2
000016D4  5242                     633              addq.w  #1,d2               ; y counter is length plus 2
000016D6  3142 FFF8                634              move.w  d2,-8(a0)           ; store y counter
000016DA                           635  truncateMargin
000016DA  3228 FFFE                636              move.w  -2(a0),d1
000016DE  4A41                     637              tst.w   d1
000016E0  6700 000A                638              beq     noSubtractX         ; do not subtract from x if zero
000016E4  5368 FFFE                639              subq.w  #1,-2(a0)
000016E8  5268 FFFA                640              addq.w  #1,-6(a0)
000016EC                           641  
000016EC                           642  noSubtractX   
000016EC  3228 FFFA                643              move.w  -6(a0),d1           ; x counter
000016F0  D268 FFFE                644              add.w   -2(a0),d1
000016F4  B27C 000A                645              cmp.w   #10,d1
000016F8  6F00 0006                646              ble     xWithinLimit
000016FC  5368 FFFA                647              subq.w  #1,-6(a0)
00001700                           648  xWithinLimit
00001700  3228 FFFC                649              move.w  -4(a0),d1
00001704  4A41                     650              tst.w   d1
00001706  6700 000A                651              beq     noSubtractY         ; no subtract if y is zero
0000170A  5368 FFFC                652              subq.w  #1,-4(a0)
0000170E  5268 FFF8                653              addq.w  #1,-8(a0)
00001712                           654  noSubtractY
00001712  3228 FFF8                655              move.w  -8(a0),d1
00001716  D268 FFFC                656              add.w   -4(a0),d1
0000171A  B27C 000A                657              cmp.w   #10,d1
0000171E  6F00 0006                658              ble     addMarginToGrid
00001722  5368 FFF8                659              subq.w  #1,-8(a0)
00001726                           660  addMarginToGrid            
00001726  43F9 000017D6            661              lea     cmpGrid,a1
0000172C  D2E8 FFFE                662              add.w   -2(a0),a1
00001730  3428 FFFC                663              move.w  -4(a0),d2           
00001734  C4FC 000A                664              mulu    #10,d2              ; multiply y by 10 to get row position
00001738  D2C2                     665              add.w   d2,a1               ; start x y position
0000173A  3228 FFFA                666              move.w  -6(a0),d1           ; x counter
0000173E                           667  addNextMargin
0000173E  4A11                     668              tst.b   (a1)                ; if tile is not empty then skip
00001740  6700 000C                669              beq     addMarginCont  
00001744  5289                     670              addq.l  #1,a1
00001746  5341                     671              subq.w  #1,d1
00001748  6700 0014                672              beq     incrementRow 
0000174C  60F0                     673              bra     addNextMargin
0000174E                           674  addMarginCont
0000174E  12FC 0010                675              move.b  #$10,(a1)+
00001752  5341                     676              subq.w  #1,d1
00001754  6700 0008                677              beq     incrementRow 
00001758  60E4                     678              bra     addNextMargin  
0000175A                           679  endOfLoop          
0000175A  4E58                     680              unlk    a0
0000175C  4E75                     681              rts
0000175E                           682  
0000175E                           683  incrementRow       
0000175E  D2FC 000A                684              adda    #10,a1              ; add row
00001762  92E8 FFFA                685              suba    -6(a0),a1           ; set x back to start
00001766  3228 FFFA                686              move.w  -6(a0),d1           ; reset x counter
0000176A  5368 FFF8                687              subq.w  #1,-8(a0)           ; decrement row counter
0000176E  67EA                     688              beq     endOfLoop  
00001770  60CC                     689              bra     addNextMargin
00001772                           690   
00001772                           691   
00001772                           692  
00001772= 00 00 00 00 00 00 ...    693  plyrGrid    dc.b    0,0,0,0,0,0,0,0,0,0
0000177C= 00 00 00 00 00 00 ...    694              dc.b    0,0,0,0,0,0,0,0,0,0
00001786= 00 00 00 00 00 00 ...    695              dc.b    0,0,0,0,0,0,0,0,0,0
00001790= 00 00 00 00 00 00 ...    696              dc.b    0,0,0,0,0,0,0,0,0,0
0000179A= 00 00 00 00 00 00 ...    697              dc.b    0,0,0,0,0,0,0,0,0,0
000017A4= 00 00 00 00 00 00 ...    698              dc.b    0,0,0,0,0,0,0,0,0,0
000017AE= 00 00 00 00 00 00 ...    699              dc.b    0,0,0,0,0,0,0,0,0,0
000017B8= 00 00 00 00 00 00 ...    700              dc.b    0,0,0,0,0,0,0,0,0,0
000017C2= 00 00 00 00 00 00 ...    701              dc.b    0,0,0,0,0,0,0,0,0,0
000017CC= 00 00 00 00 00 00 ...    702              dc.b    0,0,0,0,0,0,0,0,0,0
000017D6                           703  
000017D6= 00 00 00 00 00 00 ...    704  cmpGrid     dc.b    0,0,0,0,0,0,0,0,0,0
000017E0= 00 00 00 00 00 00 ...    705              dc.b    0,0,0,0,0,0,0,0,0,0
000017EA= 00 00 00 00 00 00 ...    706              dc.b    0,0,0,0,0,0,0,0,0,0
000017F4= 00 00 00 00 00 00 ...    707              dc.b    0,0,0,0,0,0,0,0,0,0
000017FE= 00 00 00 00 00 00 ...    708              dc.b    0,0,0,0,0,0,0,0,0,0
00001808= 00 00 00 00 00 00 ...    709              dc.b    0,0,0,0,0,0,0,0,0,0
00001812= 00 00 00 00 00 00 ...    710              dc.b    0,0,0,0,0,0,0,0,0,0
0000181C= 00 00 00 00 00 00 ...    711              dc.b    0,0,0,0,0,0,0,0,0,0
00001826= 00 00 00 00 00 00 ...    712              dc.b    0,0,0,0,0,0,0,0,0,0
00001830= 00 00 00 00 00 00 ...    713              dc.b    0,0,0,0,0,0,0,0,0,0
0000183A                           714  
0000183A                           715  
0000183A  =00000064                716  GRIDX       equ     100
0000183A= 0014                     717  tileSize    dc.w    20
0000183C= 0A                       718  tileNum     dc.b    10
0000183D                           719  
0000183D                           720  
0000183E= 00000000 00808080 ...    721  tileclr     dc.l    BLACK,GRAY,AQUA,YELLOW,RED,GREEN
00001856                           722  
00001856  =00000000                723  BLACK       equ     $00000000 
00001856  =00000080                724  MAROON      equ     $00000080 
00001856  =00008000                725  GREEN       equ     $00008000 
00001856  =00008080                726  OLIVE       equ     $00008080 
00001856  =00800000                727  NAVY        equ     $00800000 
00001856  =00800080                728  PURPLE      equ     $00800080 
00001856  =00808000                729  TEAL        equ     $00808000 
00001856  =00808080                730  GRAY        equ     $00808080 
00001856  =000000FF                731  RED         equ     $000000FF 
00001856  =0000FF00                732  LIME        equ     $0000FF00 
00001856  =0000FFFF                733  YELLOW      equ     $0000FFFF 
00001856  =00FF0000                734  BLUE        equ     $00FF0000 
00001856  =00FF00FF                735  FUCHSIA     equ     $00FF00FF 
00001856  =00FFFF00                736  AQUA        equ     $00FFFF00 
00001856  =00C0C0C0                737  LTGRAY      equ     $00C0C0C0 
00001856  =00FFFFFF                738  WHITE       equ     $00FFFFFF 
00001856                           739  
00001856                           740  
00001856                           741  
00001856                           742  
00001856                           743  -------------------- end include --------------------
00001856                           744      
00001856= 00 00                    745  cursorPos   dc.b    0,0
00001858                           746  
00001858= 00                       747  gameMode    dc.b    0           ; 0: setup, 1: play mode
00001859                           748  
00001859                           749  
00001859                           750  
0000185A= 00020001 00020001 ...    751  plyrShips   dc.l    $00020001,$00020001,$00020002,$00020003,$00020004
0000186E= 00020001 00020101 ...    752  cmpShips    dc.l    $00020001,$00020101,$00020202,$00020303,$00020404
00001882= 00000004                 753  selected    dc.l    $00000004
00001886                           754  
00001886                           755  
00001886                           756  
00001886= 50 72 65 73 73 20 ...    757  beginMsg    dc.b    'Press "y" to begin or "n" to move ships',0
000018AE= 53 74 61 72 74 00        758  startMsg    dc.b    'Start',0
000018B4                           759      
000018B4                           760      END    START        ; last line of source
000018B4                           761  -------------------- end include --------------------

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDMARGIN           169A
ADDMARGINCONT       174E
ADDMARGINTOGRID     1726
ADDNEXTMARGIN       173E
ADDTOGRID           149C
AQUA                FFFF00
BACKTOSETUP         11D6
BEGIN               11A4
BEGINGAME           11E8
BEGINMESSAGE        1056
BEGINMSG            1886
BLACK               0
BLUE                FF0000
CLEARGRD            155A
CLRGRDLOOP          1564
CMPGRID             17D6
CMPSETUP            105E
CMPSHIPS            186E
CNTNUE              1526
COMPUTERSETUP       120A
CURSORDOWN          133C
CURSORLEFT          134E
CURSORPOS           1856
CURSORRIGHT         135A
CURSORUP            1330
DRAWCURSORTARGET    1600
DRWCOL              15A8
DRWGRID             1578
DRWROW              157E
DWNBNDRYCHK         1346
ENDOFLOOP           175A
FILL                15F6
FILLRCT             15C6
FUCHSIA             FF00FF
GAMECONTD           1046
GAMELOOP            1016
GAMEMODE            1858
GETRANDOM           13CE
GRAY                808080
GREEN               8000
GRIDRFRSH           136C
GRIDX               64
INCREMENT           1408
INCREMENTROW        175E
INCROW              1522
INCSHIP             144A
INPTEND             1322
ISVERTICAL          16CA
LIME                FF00
LOADNEXTSHIP        120E
LTGRAY              C0C0C0
MAROON              80
MODULUS             140A
MULTIPLIER          1406
NAVY                800000
NOCOLLISION         1498
NOCRSRLFT           10DC
NOCRSRUP            10F0
NOCURSORTARGET      13BE
NOMARGIN            1556
NOROTATE            10F8
NORSETINDEX         1122
NOSHIPINC           116A
NOSUBTRACTX         16EC
NOSUBTRACTY         1712
NOTHORIZONTAL       1280
NXTSHIP             1420
OLIVE               8080
PLACESHIPAGAIN      12C2
PLAYMODE            106C
PLAYROUND           12D0
PLYRGRID            1772
PLYRSHIPS           185A
PURPLE              800080
RED                 FF
RHTBNDRYCHK         1364
SEED                1404
SELECTED            1882
SETSEED             13C0
SETTILE             1506
SETUP               1074
SETUPCONTINUED      1180
SETUPMODE           104E
SETVALUE            1510
SHIPSONGRD          140C
START               1000
STARTMSG            18AE
TEAL                808000
TILECLR             183E
TILENUM             183C
TILESIZE            183A
TRUNCATEMARGIN      16DA
USERINPUT           12E0
WHITE               FFFFFF
XWITHINLIMIT        1700
YELLOW              FFFF
