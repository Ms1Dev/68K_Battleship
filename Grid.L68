00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 24/05/2022 10:27:36

00000000                             1  
00000000                             2  
00000000                             3  * add ships to grid *
00000000                             4  shipsOnGrd
00000000  4E50 FFFC                  5              link    a0,#-4
00000004  217C 00000000 FFFC         6              move.l  #0,-4(a0)           ; counter variable
0000000C  2868 000C                  7              move.l  12(a0),a4
00000010  2214                       8  nxtShip     move.l  (a4),d1             ; put ship data into d1
00000012  C2BC 10000000              9              and.l   #$10000000,d1       ; bit mask to get show bit
00000018  4A81                      10              tst.l   d1                  ; test to see whether to show ship or not   
0000001A  6700 001E                 11              beq     incShip             ; if not then skip
Line 12 ERROR: Undefined symbol
0000001E  2239 004DBD16             12              move.l  selected,d1
00000024  B2A8 FFFC                 13              cmp.l   -4(a0),d1           ; compare counter to selected 
00000028  6700 0010                 14              beq     incShip             ; skip selected ship
0000002C  2F28 0008                 15              move.l  8(a0),-(SP)         ; push grid parameter
00000030  2F14                      16              move.l  (a4),-(SP)          ; push ship data onto stack
Line 17 ERROR: Undefined symbol
00000032  4EB9 004DBD16             17              jsr     addToGrid
00000038  584F                      18              adda    #$4,a7   
0000003A                            19              
0000003A                            20                            
0000003A  588C                      21  incShip     addq.l  #4,a4               ; increment array
0000003C  52A8 FFFC                 22              addq.l  #1,-4(a0)           ; decrement counter
00000040  2228 FFFC                 23              move.l  -4(a0),d1
00000044  B27C 0005                 24              cmp     #5,d1           
00000048  66C6                      25              bne     nxtShip             ; if counter equals 5 then break
0000004A  2868 000C                 26              move.l  12(a0),a4
Line 27 ERROR: Undefined symbol
0000004E  2239 004DBD16             27              move.l  selected,d1
00000054  C2FC 0004                 28              mulu    #4,d1
00000058  D9C1                      29              adda.l  d1,a4               ; selected ship data
0000005A  2F28 0008                 30              move.l  8(a0),-(SP)         ; push grid parameter
0000005E  2F14                      31              move.l  (a4),-(SP)          ; push ship data onto stack
Line 32 ERROR: Undefined symbol
00000060  4EB9 004DBD16             32              jsr     addToGrid
00000066  584F                      33              adda    #$4,a7
00000068  4A05                      34              tst.b   d5                  ; collision detected flag
0000006A  6700 001C                 35              beq     noCollision
0000006E                            36  * if collision colour ship red and add to grid *
0000006E  0294 FFF0FFFF             37              and.l   #$FFF0FFFF,(a4)     ; clear colour attribute
00000074  0694 00040000             38              add.l   #$00040000,(a4)     ; set colour
0000007A  2F28 0008                 39              move.l  8(a0),-(SP)         ; push grid parameter
0000007E  2F14                      40              move.l  (a4),-(SP)          ; push ship data onto stack
Line 41 ERROR: Undefined symbol
00000080  4EB9 004DBD16             41              jsr     addToGrid
00000086  584F                      42              adda    #$4,a7
00000088                            43  noCollision            
00000088  4E58                      44              unlk    a0
0000008A  4E75                      45              rts
0000008C                            46  *
0000008C                            47  *addToGrid   
0000008C                            48  *            link    a0,#-16         
0000008C                            49  *            move.l  8(a0),d1
0000008C                            50  *            and.l   #$00000F00,d1       ; x pos bitmask
0000008C                            51  *            lsr.l   #$8,d1              ; shift bits right
0000008C                            52  *            move.l  d1,-4(a0)           ; store x value locally
0000008C                            53  *            move.l  8(a0),d1            ; 
0000008C                            54  *            and.l   #$000000F0,d1       ; y pos bitmask
0000008C                            55  *            lsr.l   #$4,d1              ; shift bits right
0000008C                            56  *            mulu    #10,d1              ; multiply by tiles in row
0000008C                            57  *            move.l  d1,-8(a0)           ; store y value locally
0000008C                            58  *            move.l  8(a0),d1    
0000008C                            59  *            and.l   #$0000000F,d1       ; length bitmask
0000008C                            60  *            addq.l  #1,d1
0000008C                            61  *            move.l  d1,-12(a0)          ; length value
0000008C                            62  *            move.l  8(a0),d1        
0000008C                            63  *            and.l   #$00001000,d1       ; vertical/horizontal bitmask
0000008C                            64  *            lsr.l   #$8,d1
0000008C                            65  *            lsr.l   #$4,d1
0000008C                            66  *            move.b  d1,-13(a0)          ; v/h flag (true = vertical)
0000008C                            67  *            move.l  8(a0),d1
0000008C                            68  *            swap    d1
0000008C                            69  *            lsl.b   #4,d1
0000008C                            70  *            move.b  d1,-14(a0)          ; value to set grid tile to
0000008C                            71  *            
0000008C                            72  *            move.l  12(a0),a2
0000008C                            73  *   
0000008C                            74  *            move.l  -4(a0),d1
0000008C                            75  *            add.l   -8(a0),d1           ; add x and y values to get first tile                     
0000008C                            76  *            adda.l  d1,a2               ; get array index
0000008C                            77  *            clr     d5                  ; clear collision flag
0000008C                            78  *setTile     
0000008C                            79  *            tst.b   d5                  ; if d5 is set then skip
0000008C                            80  *            bne     setValue            ; this avoids unsetting the collision flag on the next tile
0000008C                            81  *            tst.b   (a2)                ; test the tile to see if anything already there
0000008C                            82  *            sne     d5                  ; if tile not empty set d5
0000008C                            83  *setValue
0000008C                            84  *            move.b  -14(a0),(a2)        ; set value of tile
0000008C                            85  *            tst.b   -13(a0)             ; test horizontal bit
0000008C                            86  *            beq     incRow
0000008C                            87  *            addq    #1,a2               ; increment the address counter by 1 (next column)
0000008C                            88  *            bra     cntnue
0000008C                            89  *incRow      adda    #10,a2              ; inc address by 10 (next row)
0000008C                            90  *cntnue      subq.l  #1,-12(a0)          ; decrement length variable
0000008C                            91  *            bne     setTile
0000008C                            92  *            
0000008C                            93  *            
0000008C                            94  *            move.l  -12(a0),d1          ; push length value on stack
0000008C                            95  *            move.w  d1,-(SP)
0000008C                            96  *            
0000008C                            97  *            clr     d1
0000008C                            98  *            move.b  -13(a0),d1          ; push horizontal flag on stack
0000008C                            99  *            move.w  d1,-(SP)
0000008C                           100  *            
0000008C                           101  *            move.l  -8(a0),d1           ; push y value on stack
0000008C                           102  *            move.w  d1,-(SP)
0000008C                           103  *            move.l  -4(a0),d1           ; push x value on stack
0000008C                           104  *            move.w  d1,-(SP)
0000008C                           105  *            
0000008C                           106  *            jsr     addMargin
0000008C                           107  *            adda    #$8,a7                                    
0000008C                           108  *            
0000008C                           109  *            unlk    a0
0000008C                           110  *            rts
0000008C                           111  *
0000008C                           112  *-----------------------------------------------------------------------------------
0000008C                           113  
0000008C                           114  
0000008C                           115  
0000008C                           116  *-----------------------------------------------------------------------------------
0000008C                           117  
0000008C                           118  * clears the player grid
0000008C                           119  clearGrd    
0000008C  4E50 0000                120              link    a0,#0
00000090  2468 0008                121              move.l  8(a0),a2            ; load the player grid
00000094  7200                     122              move.l  #0,d1               ; load counter into d1
00000096                           123  clrGrdLoop  
00000096  264A                     124              movea.l a2,a3
00000098  D7C1                     125              adda.l  d1,a3
0000009A  16BC 0000                126              move.b  #0,(a3)             ; move 0 into grid
0000009E  5281                     127              addq.l  #1,d1               ; decrement counter
000000A0  B27C 0064                128              cmp     #100,d1
000000A4  66F0                     129              bne     clrGrdLoop          ; if equals 100 then break
000000A6  4E58                     130              unlk    a0
000000A8  4E75                     131              rts
000000AA                           132  
000000AA                           133  *-------------------------------------------------------------------------------------
000000AA                           134  
000000AA                           135  * draws the grid *
000000AA                           136  
000000AA  282F 0004                137  drwGrid     move.l  4(a7),d4            ; starting lower y value
000000AE  4245                     138              clr     d5                  ; row counter
000000B0  363C 0064                139  drwRow      move.w  #GRIDX,d3           ; starting x value
000000B4  3404                     140              move.w  d4,d2               ; move lower y value into upper y
000000B6  D879 000001B2            141              add.w   tileSize,d4         ; add tile size to lower y
000000BC  4246                     142              clr     d6                  ; column counter
000000BE  4EB9 000000CE            143              jsr     drwCol          
000000C4  5245                     144              addq    #1,d5               ; increment row counter
000000C6  BA7C 000A                145              cmp     #$a,d5
000000CA  66E4                     146              bne     drwRow
000000CC  4E75                     147              rts 
000000CE                           148  
000000CE  4EB9 000000EC            149  drwCol      jsr     fillRct
000000D4  3203                     150              move.w  d3,d1               ; move right x value into left xx
000000D6  D679 000001B2            151              add.w   tileSize,d3         ; add tile size to right x
000000DC  303C 0057                152              move.w  #87,d0              ; draw rectangle
000000E0  4E4F                     153              trap    #15             
000000E2  5246                     154              addq    #1,d6               ; increment column counter
000000E4  BC7C 000A                155              cmp     #$a,d6
000000E8  66E4                     156              bne     drwCol
000000EA  4E75                     157              rts           
000000EC                           158  
000000EC  4E50 FFFC                159  fillRct     link    a0,#-4
000000F0  47D2                     160              lea     (a2),a3             ; load grid
000000F2  1E39 000001B4            161              move.b  tileNum,d7          ; move 10 to d7 (number of tiles)
000000F8  CEC5                     162              mulu    d5,d7               ; multiply row counter with d7
000000FA  DE06                     163              add.b   d6,d7               ; add column counter with d7
000000FC  D6C7                     164              adda    d7,a3               ; add d7 to grid address
000000FE  1153 0004                165              move.b  (a3),4(a0)          ; move value of a3 to local variable
00000102  1E3C 00F0                166              move.b  #$F0,d7             ; put bit mask 11110000 into d7                       
00000106  CE28 0004                167              and.b   4(a0),d7            ; and bit mask with tile data bits
0000010A  8EFC 0010                168              divu    #$10,d7             ; shift bits right
0000010E  CEFC 0004                169              mulu    #$4,d7              ; multiply by 4 to increment array of longs
00000112  47F9 000001B6            170              lea     tileclr,a3          ; load tile colour array address
00000118  D6C7                     171              adda    d7,a3               ; increment array  
0000011A  2213                     172              move.l  (a3),d1             ; move selected colour into d1
0000011C  103C 0051                173  fill        move.b  #81,d0              ; set fill colour
00000120  4E4F                     174              trap    #15 
00000122  4E58                     175              unlk    a0 
00000124  4E75                     176              rts
00000126                           177              
00000126                           178  
00000126                           179  
00000126                           180  
00000126                           181  
00000126                           182  
00000126                           183  
00000126                           184  
00000126                           185  addMargin
00000126  4E50 FFF8                186              link    a0,#-8
0000012A  3228 0008                187              move.w  8(a0),d1            ; ship x
0000012E  3428 000A                188              move.w  10(a0),d2           ; ship y
00000132                           189              
00000132  5341                     190              subq.w  #1,d1            
00000134  3141 FFFE                191              move.w  d1,-2(a0)           ; store start x pos
00000138  5342                     192              subq.w  #1,d2
0000013A                           193              
0000013A  3142 FFFC                194              move.w  d2,-4(a0)           ; store start y pos
0000013E  4A68 0008                195              tst.w   8(a0)               ; test the horizontal flag
00000142  6700 0016                196              beq     isVertical
00000146  3228 000E                197              move.w  14(a0),d1           ; x counter 
0000014A  5441                     198              addq.w  #2,d1
0000014C  3141 FFFA                199              move.w  d1,-6(a0)           ; store x counter
00000150  317C 0002 FFF8           200              move.w  #2,-8(a0)           ; store y counter
00000156  6000 0012                201              bra     addMarginToGrid
0000015A                           202  isVertical
0000015A  317C 0002 FFFA           203              move.w  #2,-6(a0)           ; store x counter
00000160  3428 000E                204              move.w  14(a0),d2
00000164  5442                     205              addq.w  #2,d2               ; y counter is length plus 2
00000166  3142 FFF8                206              move.w  d2,-8(a0)           ; store y counter
0000016A                           207              
0000016A                           208  addMarginToGrid            
Line 209 ERROR: Undefined symbol
0000016A  43F9 004DBD16            209              lea     cmpGrid,a1
00000170  D2E8 FFFE                210              add.w   -2(a0),a1
00000174  3428 FFFC                211              move.w  -4(a0),d2           
00000178  C4FC 000A                212              mulu    #10,d2              ; multiply y by 10 to get row position
0000017C  D2C2                     213              add.w   d2,a1               ; start x y position
0000017E  3228 FFFA                214              move.w  -6(a0),d1           ; x counter
00000182                           215  addNextMargin
00000182  4A11                     216              tst.b   (a1)                ; if tile is not empty then skip
00000184  6700 0004                217              beq     addMarginCont
00000188  5251                     218              addq    #1,(a1)
0000018A                           219  addMarginCont
0000018A  12FC 0010                220              move.b  #$10,(a1)+
0000018E  5341                     221              subq.w  #1,d1
00000190  6700 0008                222              beq     incrementRow 
00000194  60EC                     223              bra     addNextMargin  
00000196                           224  endOfLoop          
00000196  4E58                     225              unlk    a0
00000198  4E75                     226              rts
0000019A                           227  
0000019A                           228  incrementRow
0000019A  4A68 FFF8                229              tst.w   -8(a0)
0000019E  67F6                     230              beq     endOfLoop          
000001A0  D2FC 000A                231              adda    #10,a1              ; add row
000001A4  92E8 FFFA                232              suba    -6(a0),a1           ; set x back to start
000001A8  3228 FFFA                233              move.w  -6(a0),d1           ; reset x counter
000001AC  5368 FFF8                234              subq.w  #1,-8(a0)           ; decrement row counter
000001B0  60D0                     235              bra     addNextMargin
000001B2                           236   
000001B2                           237   
000001B2                           238  
000001B2                           239  
000001B2                           240  
000001B2                           241  
000001B2                           242  
000001B2                           243  
000001B2                           244  
000001B2                           245  
000001B2                           246  
000001B2  =00000064                247  GRIDX       equ     100
000001B2= 0014                     248  tileSize    dc.w    20
000001B4= 0A                       249  tileNum     dc.b    10
000001B5                           250  
000001B5                           251  
000001B6= 00000000 00808080 ...    252  tileclr     dc.l    BLACK,GRAY,AQUA,YELLOW,RED,GREEN
000001CE                           253  
000001CE  =00000000                254  BLACK       equ     $00000000 
000001CE  =00000080                255  MAROON      equ     $00000080 
000001CE  =00008000                256  GREEN       equ     $00008000 
000001CE  =00008080                257  OLIVE       equ     $00008080 
000001CE  =00800000                258  NAVY        equ     $00800000 
000001CE  =00800080                259  PURPLE      equ     $00800080 
000001CE  =00808000                260  TEAL        equ     $00808000 
000001CE  =00808080                261  GRAY        equ     $00808080 
000001CE  =000000FF                262  RED         equ     $000000FF 
000001CE  =0000FF00                263  LIME        equ     $0000FF00 
000001CE  =0000FFFF                264  YELLOW      equ     $0000FFFF 
000001CE  =00FF0000                265  BLUE        equ     $00FF0000 
000001CE  =00FF00FF                266  FUCHSIA     equ     $00FF00FF 
000001CE  =00FFFF00                267  AQUA        equ     $00FFFF00 
000001CE  =00C0C0C0                268  LTGRAY      equ     $00C0C0C0 
000001CE  =00FFFFFF                269  WHITE       equ     $00FFFFFF 
000001CE                           270  
000001CE                           271  
000001CE                           272  
Line 273 WARNING: END directive missing, starting address not set

6 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDMARGIN           126
ADDMARGINCONT       18A
ADDMARGINTOGRID     16A
ADDNEXTMARGIN       182
AQUA                FFFF00
BLACK               0
BLUE                FF0000
CLEARGRD            8C
CLRGRDLOOP          96
DRWCOL              CE
DRWGRID             AA
DRWROW              B0
ENDOFLOOP           196
FILL                11C
FILLRCT             EC
FUCHSIA             FF00FF
GRAY                808080
GREEN               8000
GRIDX               64
INCREMENTROW        19A
INCSHIP             3A
ISVERTICAL          15A
LIME                FF00
LTGRAY              C0C0C0
MAROON              80
NAVY                800000
NOCOLLISION         88
NXTSHIP             10
OLIVE               8080
PURPLE              800080
RED                 FF
SHIPSONGRD          0
TEAL                808000
TILECLR             1B6
TILENUM             1B4
TILESIZE            1B2
WHITE               FFFFFF
YELLOW              FFFF
