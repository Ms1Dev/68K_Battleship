00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 24/05/2022 19:04:11

00000000                             1  
00000000                             2  
00000000                             3  * add ships to grid *
00000000                             4  shipsOnGrd
00000000  4E50 FFFC                  5              link    a0,#-4
00000004  217C 00000000 FFFC         6              move.l  #0,-4(a0)           ; counter variable
0000000C  2868 000C                  7              move.l  12(a0),a4
00000010  2214                       8  nxtShip     move.l  (a4),d1             ; put ship data into d1
00000012  C2BC 10000000              9              and.l   #$10000000,d1       ; bit mask to get show bit
00000018  4A81                      10              tst.l   d1                  ; test to see whether to show ship or not   
0000001A  6700 001E                 11              beq     incShip             ; if not then skip
Line 12 ERROR: Undefined symbol
0000001E  2239 004DBD16             12              move.l  selected,d1
00000024  B2A8 FFFC                 13              cmp.l   -4(a0),d1           ; compare counter to selected 
00000028  6700 0010                 14              beq     incShip             ; skip selected ship
0000002C  2F28 0008                 15              move.l  8(a0),-(SP)         ; push grid parameter
00000030  2F14                      16              move.l  (a4),-(SP)          ; push ship data onto stack
00000032  4EB9 0000008C             17              jsr     addToGrid
00000038  584F                      18              adda    #$4,a7   
0000003A                            19                            
0000003A  588C                      20  incShip     addq.l  #4,a4               ; increment array
0000003C  52A8 FFFC                 21              addq.l  #1,-4(a0)           ; decrement counter
00000040  2228 FFFC                 22              move.l  -4(a0),d1
00000044  B27C 0005                 23              cmp     #5,d1           
00000048  66C6                      24              bne     nxtShip             ; if counter equals 5 then break
0000004A  2868 000C                 25              move.l  12(a0),a4
Line 26 ERROR: Undefined symbol
0000004E  2239 004DBD16             26              move.l  selected,d1
00000054  C2FC 0004                 27              mulu    #4,d1
00000058  D9C1                      28              adda.l  d1,a4               ; selected ship data
0000005A  2F28 0008                 29              move.l  8(a0),-(SP)         ; push grid parameter
0000005E  2F14                      30              move.l  (a4),-(SP)          ; push ship data onto stack
00000060  4EB9 0000008C             31              jsr     addToGrid
00000066  584F                      32              adda    #$4,a7
00000068  4A05                      33              tst.b   d5                  ; collision detected flag
0000006A  6700 001C                 34              beq     noCollision
0000006E                            35  * if collision colour ship red and add to grid *
0000006E  0294 FFF0FFFF             36              and.l   #$FFF0FFFF,(a4)     ; clear colour attribute
00000074  0694 00040000             37              add.l   #$00040000,(a4)     ; set colour
0000007A  2F28 0008                 38              move.l  8(a0),-(SP)         ; push grid parameter
0000007E  2F14                      39              move.l  (a4),-(SP)          ; push ship data onto stack
00000080  4EB9 0000008C             40              jsr     addToGrid
00000086  584F                      41              adda    #$4,a7
00000088                            42  noCollision            
00000088  4E58                      43              unlk    a0
0000008A  4E75                      44              rts
0000008C                            45  
0000008C                            46  addToGrid   
0000008C  4E50 FFF0                 47              link    a0,#-16         
00000090  2228 0008                 48              move.l  8(a0),d1
00000094  C2BC 00000F00             49              and.l   #$00000F00,d1       ; x pos bitmask
0000009A  E089                      50              lsr.l   #$8,d1              ; shift bits right
0000009C  2141 FFFC                 51              move.l  d1,-4(a0)           ; store x value locally
000000A0  2228 0008                 52              move.l  8(a0),d1            ; 
000000A4  C2BC 000000F0             53              and.l   #$000000F0,d1       ; y pos bitmask
000000AA  E889                      54              lsr.l   #$4,d1              ; shift bits right
000000AC  C2FC 000A                 55              mulu    #10,d1              ; multiply by tiles in row
000000B0  2141 FFF8                 56              move.l  d1,-8(a0)           ; store y value locally
000000B4  2228 0008                 57              move.l  8(a0),d1    
000000B8  C2BC 0000000F             58              and.l   #$0000000F,d1       ; length bitmask
000000BE  5281                      59              addq.l  #1,d1
000000C0  2141 FFF4                 60              move.l  d1,-12(a0)          ; length value
000000C4  2228 0008                 61              move.l  8(a0),d1        
000000C8  C2BC 00001000             62              and.l   #$00001000,d1       ; vertical/horizontal bitmask
000000CE  E089                      63              lsr.l   #$8,d1
000000D0  E889                      64              lsr.l   #$4,d1
000000D2  1141 FFF3                 65              move.b  d1,-13(a0)          ; v/h flag (true = vertical)
000000D6  2228 0008                 66              move.l  8(a0),d1
000000DA  4841                      67              swap    d1
000000DC  E909                      68              lsl.b   #4,d1
000000DE  1141 FFF2                 69              move.b  d1,-14(a0)          ; value to set grid tile to
000000E2                            70              
000000E2  2468 000C                 71              move.l  12(a0),a2
000000E6                            72     
000000E6  2228 FFFC                 73              move.l  -4(a0),d1
000000EA  D2A8 FFF8                 74              add.l   -8(a0),d1           ; add x and y values to get first tile                     
000000EE  D5C1                      75              adda.l  d1,a2               ; get array index
000000F0  4245                      76              clr     d5                  ; clear collision flag
000000F2  2228 FFF4                 77              move.l  -12(a0),d1
000000F6                            78  setTile     
000000F6  4A05                      79              tst.b   d5                  ; if d5 is set then skip
000000F8  6600 0006                 80              bne     setValue            ; this avoids unsetting the collision flag on the next tile
000000FC  4A12                      81              tst.b   (a2)                ; test the tile to see if anything already there
000000FE  56C5                      82              sne     d5                  ; if tile not empty set d5
00000100                            83  setValue
00000100  14A8 FFF2                 84              move.b  -14(a0),(a2)        ; set value of tile
00000104  4A28 FFF3                 85              tst.b   -13(a0)             ; test horizontal bit
00000108  6700 0008                 86              beq     incRow
0000010C  524A                      87              addq    #1,a2               ; increment the address counter by 1 (next column)
0000010E  6000 0006                 88              bra     cntnue
00000112  D4FC 000A                 89  incRow      adda    #10,a2              ; inc address by 10 (next row)
Line 90 ERROR: Invalid syntax
00000116                            90  cntnue      subq.l  #1,-=d1             ; decrement length variable
00000116  66DE                      91              bne     setTile
00000118                            92              
00000118                            93              
00000118  2228 FFF4                 94              move.l  -12(a0),d1          ; push length value on stack
0000011C  3F01                      95              move.w  d1,-(SP)
0000011E                            96              
0000011E  4241                      97              clr     d1
00000120  1228 FFF3                 98              move.b  -13(a0),d1          ; push horizontal flag on stack
00000124  3F01                      99              move.w  d1,-(SP)
00000126                           100              
00000126  2228 FFF8                101              move.l  -8(a0),d1           ; push y value on stack
0000012A  82FC 000A                102              divu    #10,d1
0000012E  3F01                     103              move.w  d1,-(SP)
00000130  2228 FFFC                104              move.l  -4(a0),d1           ; push x value on stack
00000134  3F01                     105              move.w  d1,-(SP)
00000136                           106              
00000136  4EB9 00000276            107              jsr     addMargin
0000013C  504F                     108              adda    #$8,a7                                    
0000013E                           109              
0000013E  4E58                     110              unlk    a0
00000140  4E75                     111              rts
00000142                           112  
00000142                           113  *-----------------------------------------------------------------------------------
00000142                           114  
00000142                           115  
00000142                           116  
00000142                           117  *-----------------------------------------------------------------------------------
00000142                           118  
00000142                           119  * clears the player grid
00000142                           120  clearGrd    
00000142  4E50 0000                121              link    a0,#0
00000146  2468 0008                122              move.l  8(a0),a2            ; load the player grid
0000014A  7200                     123              move.l  #0,d1               ; load counter into d1
0000014C                           124  clrGrdLoop  
0000014C  264A                     125              movea.l a2,a3
0000014E  D7C1                     126              adda.l  d1,a3
00000150  16BC 0000                127              move.b  #0,(a3)             ; move 0 into grid
00000154  5281                     128              addq.l  #1,d1               ; decrement counter
00000156  B27C 0064                129              cmp     #100,d1
0000015A  66F0                     130              bne     clrGrdLoop          ; if equals 100 then break
0000015C  4E58                     131              unlk    a0
0000015E  4E75                     132              rts
00000160                           133  
00000160                           134  *-------------------------------------------------------------------------------------
00000160                           135  
00000160                           136  * draws the grid *
00000160                           137  
00000160  282F 0004                138  drwGrid     move.l  4(a7),d4            ; starting lower y value
00000164  4245                     139              clr     d5                  ; row counter
00000166  363C 0064                140  drwRow      move.w  #GRIDX,d3           ; starting x value
0000016A  3404                     141              move.w  d4,d2               ; move lower y value into upper y
0000016C  D879 00000400            142              add.w   tileSize,d4         ; add tile size to lower y
00000172  4246                     143              clr     d6                  ; column counter
00000174  4EB9 00000184            144              jsr     drwCol          
0000017A  5245                     145              addq    #1,d5               ; increment row counter
0000017C  BA7C 000A                146              cmp     #$a,d5
00000180  66E4                     147              bne     drwRow
00000182  4E75                     148              rts 
00000184                           149  
00000184  4EB9 000001A2            150  drwCol      jsr     fillRct
0000018A  3203                     151              move.w  d3,d1               ; move right x value into left xx
0000018C  D679 00000400            152              add.w   tileSize,d3         ; add tile size to right x
00000192  303C 0057                153              move.w  #87,d0              ; draw rectangle
00000196  4E4F                     154              trap    #15             
00000198  5246                     155              addq    #1,d6               ; increment column counter
0000019A  BC7C 000A                156              cmp     #$a,d6
0000019E  66E4                     157              bne     drwCol
000001A0  4E75                     158              rts           
000001A2                           159  
000001A2  4E50 FFFC                160  fillRct     link    a0,#-4
000001A6  47D2                     161              lea     (a2),a3             ; load grid
000001A8  1E39 00000402            162              move.b  tileNum,d7          ; move 10 to d7 (number of tiles)
000001AE  CEC5                     163              mulu    d5,d7               ; multiply row counter with d7
000001B0  DE06                     164              add.b   d6,d7               ; add column counter with d7
000001B2  D6C7                     165              adda    d7,a3               ; add d7 to grid address
000001B4  1153 0004                166              move.b  (a3),4(a0)          ; move value of a3 to local variable
000001B8  1E3C 00F0                167              move.b  #$F0,d7             ; put bit mask 11110000 into d7                       
000001BC  CE28 0004                168              and.b   4(a0),d7            ; and bit mask with tile data bits
000001C0  8EFC 0010                169              divu    #$10,d7             ; shift bits right
000001C4  CEFC 0004                170              mulu    #$4,d7              ; multiply by 4 to increment array of longs
000001C8  47F9 00000404            171              lea     tileclr,a3          ; load tile colour array address
000001CE  D6C7                     172              adda    d7,a3               ; increment array  
000001D0  2213                     173              move.l  (a3),d1             ; move selected colour into d1
000001D2  103C 0051                174  fill        move.b  #81,d0              ; set fill colour
000001D6  4E4F                     175              trap    #15 
000001D8                           176              
000001D8  4E58                     177              unlk    a0 
000001DA  4E75                     178              rts
000001DC                           179              
000001DC                           180              
000001DC                           181  
000001DC                           182  *-----------------------------------------------------------------------------------
000001DC                           183  
000001DC                           184  drawCursorTarget
000001DC                           185  
000001DC  4E50 FFF8                186              link    a0,#-8
000001E0                           187  
000001E0  223C 00FF00FF            188              move.l  #FUCHSIA,d1
000001E6  303C 0050                189              move    #80,d0
000001EA  4E4F                     190              trap    #15
000001EC                           191  
000001EC                           192  
000001EC  4241                     193              clr     d1
000001EE  4242                     194              clr     d2
000001F0  1228 000A                195              move.b  10(a0),d1           
000001F4  C2F9 00000400            196              mulu    tileSize,d1
000001FA  0641 0064                197              add     #GRIDX,d1
000001FE                           198  
000001FE  1428 0008                199              move.b  8(a0),d2
00000202  C4F9 00000400            200              mulu    tileSize,d2
00000208  D4A8 000C                201              add.l   12(a0),d2
0000020C                           202  
0000020C  2601                     203              move.l  d1,d3
0000020E  2802                     204              move.l  d2,d4
00000210  D679 00000400            205              add     tileSize,d3
00000216  D879 00000400            206              add     tileSize,d4
0000021C                           207  
0000021C  303C 005B                208              move.w  #91,d0
00000220  4E4F                     209              trap    #15
00000222                           210  
00000222  2141 FFFC                211              move.l  d1,-4(a0)           ; store x values in local variable
00000226  2143 FFF8                212              move.l  d3,-8(a0)
0000022A                           213  
0000022A  3239 00000400            214              move    tileSize,d1
00000230  82FC 0002                215              divu    #2,d1
00000234  D2A8 FFFC                216              add.l   -4(a0),d1              
00000238  3601                     217              move    d1,d3
0000023A                           218  
0000023A  303C 0054                219              move.w  #84,d0
0000023E  4E4F                     220              trap    #15
00000240                           221  
00000240  2228 FFFC                222              move.l  -4(a0),d1           ; restore x values
00000244  2628 FFF8                223              move.l  -8(a0),d3
00000248                           224  
00000248  2142 FFFC                225              move.l  d2,-4(a0)           ; store y values in local variable
0000024C  2144 FFF8                226              move.l  d4,-8(a0)
00000250                           227  
00000250  3439 00000400            228              move    tileSize,d2
00000256  84FC 0002                229              divu    #2,d2
0000025A  D4A8 FFFC                230              add.l   -4(a0),d2              
0000025E  3802                     231              move    d2,d4
00000260                           232  
00000260  303C 0054                233              move.w  #84,d0
00000264  4E4F                     234              trap    #15
00000266                           235  
00000266  223C 00FFFFFF            236              move.l  #WHITE,d1
0000026C  303C 0050                237              move    #80,d0
00000270  4E4F                     238              trap    #15
00000272                           239  
00000272  4E58                     240              unlk    a0
00000274  4E75                     241              rts
00000276                           242  
00000276                           243  
00000276                           244  *-----------------------------------------------------------------------------------
00000276                           245  
00000276                           246  * sets the value of all neighbouring tiles of a ship
00000276                           247  * used for computer setup so ships are not clumped together
00000276                           248  
00000276                           249  
00000276                           250  addMargin
00000276  4E50 FFF8                251              link    a0,#-8
0000027A  3228 0008                252              move.w  8(a0),d1            ; ship x
0000027E  3428 000A                253              move.w  10(a0),d2           ; ship y
00000282                           254              
00000282  4A41                     255              tst.w   d1
00000284  6700 0004                256              beq     noSubtractX         ; do not subtract from x if zero
00000288  5341                     257              subq.w  #1,d1            
0000028A                           258  noSubtractX            
0000028A  3141 FFFE                259              move.w  d1,-2(a0)           ; store start x pos
0000028E  4A42                     260              tst.w   d2
00000290  6700 0004                261              beq     noSubtractY         ; no subtract if y is zero
00000294  5342                     262              subq.w  #1,d2
00000296                           263  noSubtractY
00000296  3142 FFFC                264              move.w  d2,-4(a0)           ; store start y pos
0000029A  4A68 0008                265              tst.w   8(a0)               ; test the horizontal flag
0000029E  6700 0016                266              beq     isVertical
000002A2  3228 000E                267              move.w  14(a0),d1           ; x counter
000002A6  5441                     268              addq.w  #2,d1
000002A8  3141 FFFA                269              move.w  d1,-6(a0)           ; store x counter
000002AC  317C 0002 FFF8           270              move.w  #2,-8(a0)           ; store y counter
000002B2  6000 003A                271              bra     addMarginToGrid
000002B6                           272  isVertical
000002B6  317C 0002 FFFA           273              move.w  #2,-6(a0)           ; store x counter
000002BC  3428 000E                274              move.w  14(a0),d2
000002C0  5442                     275              addq.w  #2,d2               ; y counter is length plus 2
000002C2  3142 FFF8                276              move.w  d2,-8(a0)           ; store y counter
000002C6                           277  
000002C6                           278  * truncate x and y counters if they exceed grid
000002C6  3228 FFFA                279              move.w  -6(a0),d1
000002CA  D268 FFFE                280              add.w   -2(a0),d1
000002CE  B27C 0009                281              cmp.w   #9,d1
000002D2  6C00 0006                282              bge     xWithinLimit
000002D6  5368 FFFA                283              subq.w  #1,-6(a0)
000002DA                           284  xWithinLimit
000002DA  3228 FFF8                285              move.w  -8(a0),d1
000002DE  D268 FFFC                286              add.w   -4(a0),d1
000002E2  B27C 0009                287              cmp.w   #9,d1
000002E6  6C00 0006                288              bge     addMarginToGrid
000002EA  5368 FFF8                289              subq.w  #1,-8(a0)
000002EE                           290              
000002EE                           291  addMarginToGrid            
000002EE  43F9 0000039C            292              lea     cmpGrid,a1
000002F4  D2E8 FFFE                293              add.w   -2(a0),a1
000002F8  3428 FFFC                294              move.w  -4(a0),d2           
000002FC  C4FC 000A                295              mulu    #10,d2              ; multiply y by 10 to get row position
00000300  D2C2                     296              add.w   d2,a1               ; start x y position
00000302  3228 FFFA                297              move.w  -6(a0),d1           ; x counter
00000306                           298  addNextMargin
00000306  4A11                     299              tst.b   (a1)                ; if tile is not empty then skip
00000308  6700 0006                300              beq     addMarginCont
0000030C  5289                     301              addq.l  #1,a1
0000030E  60F6                     302              bra     addNextMargin
00000310                           303  addMarginCont
00000310  12FC 0010                304              move.b  #$10,(a1)+
00000314  5341                     305              subq.w  #1,d1
00000316  6700 0008                306              beq     incrementRow 
0000031A  60EA                     307              bra     addNextMargin  
0000031C                           308  endOfLoop          
0000031C  4E58                     309              unlk    a0
0000031E  4E75                     310              rts
00000320                           311  
00000320                           312  incrementRow
00000320  4A68 FFF8                313              tst.w   -8(a0)
00000324  67F6                     314              beq     endOfLoop          
00000326  D2FC 000A                315              adda    #10,a1              ; add row
0000032A  92E8 FFFA                316              suba    -6(a0),a1           ; set x back to start
0000032E  3228 FFFA                317              move.w  -6(a0),d1           ; reset x counter
00000332  5368 FFF8                318              subq.w  #1,-8(a0)           ; decrement row counter
00000336  60CE                     319              bra     addNextMargin
00000338                           320   
00000338                           321   
00000338                           322  
00000338= 00 00 00 00 00 00 ...    323  plyrGrid    dc.b    0,0,0,0,0,0,0,0,0,0
00000342= 00 00 00 00 00 00 ...    324              dc.b    0,0,0,0,0,0,0,0,0,0
0000034C= 00 00 00 00 00 00 ...    325              dc.b    0,0,0,0,0,0,0,0,0,0
00000356= 00 00 00 00 00 00 ...    326              dc.b    0,0,0,0,0,0,0,0,0,0
00000360= 00 00 00 00 00 00 ...    327              dc.b    0,0,0,0,0,0,0,0,0,0
0000036A= 00 00 00 00 00 00 ...    328              dc.b    0,0,0,0,0,0,0,0,0,0
00000374= 00 00 00 00 00 00 ...    329              dc.b    0,0,0,0,0,0,0,0,0,0
0000037E= 00 00 00 00 00 00 ...    330              dc.b    0,0,0,0,0,0,0,0,0,0
00000388= 00 00 00 00 00 00 ...    331              dc.b    0,0,0,0,0,0,0,0,0,0
00000392= 00 00 00 00 00 00 ...    332              dc.b    0,0,0,0,0,0,0,0,0,0
0000039C                           333  
0000039C= 00 00 00 00 00 00 ...    334  cmpGrid     dc.b    0,0,0,0,0,0,0,0,0,0
000003A6= 00 00 00 00 00 00 ...    335              dc.b    0,0,0,0,0,0,0,0,0,0
000003B0= 00 00 00 00 00 00 ...    336              dc.b    0,0,0,0,0,0,0,0,0,0
000003BA= 00 00 00 00 00 00 ...    337              dc.b    0,0,0,0,0,0,0,0,0,0
000003C4= 00 00 00 00 00 00 ...    338              dc.b    0,0,0,0,0,0,0,0,0,0
000003CE= 00 00 00 00 00 00 ...    339              dc.b    0,0,0,0,0,0,0,0,0,0
000003D8= 00 00 00 00 00 00 ...    340              dc.b    0,0,0,0,0,0,0,0,0,0
000003E2= 00 00 00 00 00 00 ...    341              dc.b    0,0,0,0,0,0,0,0,0,0
000003EC= 00 00 00 00 00 00 ...    342              dc.b    0,0,0,0,0,0,0,0,0,0
000003F6= 00 00 00 00 00 00 ...    343              dc.b    0,0,0,0,0,0,0,0,0,0
00000400                           344  
00000400                           345  
00000400  =00000064                346  GRIDX       equ     100
00000400= 0014                     347  tileSize    dc.w    20
00000402= 0A                       348  tileNum     dc.b    10
00000403                           349  
00000403                           350  
00000404= 00000000 00808080 ...    351  tileclr     dc.l    BLACK,GRAY,AQUA,YELLOW,RED,GREEN
0000041C                           352  
0000041C  =00000000                353  BLACK       equ     $00000000 
0000041C  =00000080                354  MAROON      equ     $00000080 
0000041C  =00008000                355  GREEN       equ     $00008000 
0000041C  =00008080                356  OLIVE       equ     $00008080 
0000041C  =00800000                357  NAVY        equ     $00800000 
0000041C  =00800080                358  PURPLE      equ     $00800080 
0000041C  =00808000                359  TEAL        equ     $00808000 
0000041C  =00808080                360  GRAY        equ     $00808080 
0000041C  =000000FF                361  RED         equ     $000000FF 
0000041C  =0000FF00                362  LIME        equ     $0000FF00 
0000041C  =0000FFFF                363  YELLOW      equ     $0000FFFF 
0000041C  =00FF0000                364  BLUE        equ     $00FF0000 
0000041C  =00FF00FF                365  FUCHSIA     equ     $00FF00FF 
0000041C  =00FFFF00                366  AQUA        equ     $00FFFF00 
0000041C  =00C0C0C0                367  LTGRAY      equ     $00C0C0C0 
0000041C  =00FFFFFF                368  WHITE       equ     $00FFFFFF 
0000041C                           369  
0000041C                           370  
0000041C                           371  
0000041C                           372  
Line 373 WARNING: END directive missing, starting address not set

3 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDMARGIN           276
ADDMARGINCONT       310
ADDMARGINTOGRID     2EE
ADDNEXTMARGIN       306
ADDTOGRID           8C
AQUA                FFFF00
BLACK               0
BLUE                FF0000
CLEARGRD            142
CLRGRDLOOP          14C
CMPGRID             39C
CNTNUE              116
DRAWCURSORTARGET    1DC
DRWCOL              184
DRWGRID             160
DRWROW              166
ENDOFLOOP           31C
FILL                1D2
FILLRCT             1A2
FUCHSIA             FF00FF
GRAY                808080
GREEN               8000
GRIDX               64
INCREMENTROW        320
INCROW              112
INCSHIP             3A
ISVERTICAL          2B6
LIME                FF00
LTGRAY              C0C0C0
MAROON              80
NAVY                800000
NOCOLLISION         88
NOSUBTRACTX         28A
NOSUBTRACTY         296
NXTSHIP             10
OLIVE               8080
PLYRGRID            338
PURPLE              800080
RED                 FF
SETTILE             F6
SETVALUE            100
SHIPSONGRD          0
TEAL                808000
TILECLR             404
TILENUM             402
TILESIZE            400
WHITE               FFFFFF
XWITHINLIMIT        2DA
YELLOW              FFFF
